package com.xstd.pirvatephone.dao.phone;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.pirvatephone.dao.phone.PhoneRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHONE_RECORD.
*/
public class PhoneRecordDao extends AbstractDao<PhoneRecord, Long> {

    public static final String TABLENAME = "PHONE_RECORD";

    /**
     * Properties of entity PhoneRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone_number = new Property(1, String.class, "phone_number", false, "PHONE_NUMBER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Date = new Property(4, long.class, "date", false, "DATE");
        public final static Property Contact_times = new Property(5, int.class, "contact_times", false, "CONTACT_TIMES");
        public final static Property Duration = new Property(6, long.class, "duration", false, "DURATION");
    };


    public PhoneRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHONE_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHONE_NUMBER' TEXT NOT NULL ," + // 1: phone_number
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'TYPE' INTEGER NOT NULL ," + // 3: type
                "'DATE' INTEGER NOT NULL ," + // 4: date
                "'CONTACT_TIMES' INTEGER NOT NULL ," + // 5: contact_times
                "'DURATION' INTEGER NOT NULL );"); // 6: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHONE_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPhone_number());
        stmt.bindString(3, entity.getName());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getDate());
        stmt.bindLong(6, entity.getContact_times());
        stmt.bindLong(7, entity.getDuration());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhoneRecord readEntity(Cursor cursor, int offset) {
        PhoneRecord entity = new PhoneRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // phone_number
            cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // type
            cursor.getLong(offset + 4), // date
            cursor.getInt(offset + 5), // contact_times
            cursor.getLong(offset + 6) // duration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone_number(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setDate(cursor.getLong(offset + 4));
        entity.setContact_times(cursor.getInt(offset + 5));
        entity.setDuration(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhoneRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhoneRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
