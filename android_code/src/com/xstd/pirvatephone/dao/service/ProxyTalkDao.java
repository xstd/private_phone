package com.xstd.pirvatephone.dao.service;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.pirvatephone.dao.service.ProxyTalk;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROXY_TALK.
*/
public class ProxyTalkDao extends AbstractDao<ProxyTalk, Long> {

    public static final String TABLENAME = "PROXY_TALK";

    /**
     * Properties of entity ProxyTalk.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phonenumber = new Property(1, String.class, "phonenumber", false, "PHONENUMBER");
        public final static Property Weixinnumber = new Property(2, String.class, "weixinnumber", false, "WEIXINNUMBER");
        public final static Property Weixinpwd = new Property(3, String.class, "weixinpwd", false, "WEIXINPWD");
        public final static Property Starttime = new Property(4, java.util.Date.class, "starttime", false, "STARTTIME");
        public final static Property Endtime = new Property(5, java.util.Date.class, "endtime", false, "ENDTIME");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
    };


    public ProxyTalkDao(DaoConfig config) {
        super(config);
    }
    
    public ProxyTalkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROXY_TALK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHONENUMBER' TEXT," + // 1: phonenumber
                "'WEIXINNUMBER' TEXT," + // 2: weixinnumber
                "'WEIXINPWD' TEXT," + // 3: weixinpwd
                "'STARTTIME' INTEGER," + // 4: starttime
                "'ENDTIME' INTEGER," + // 5: endtime
                "'TYPE' INTEGER);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROXY_TALK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProxyTalk entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(2, phonenumber);
        }
 
        String weixinnumber = entity.getWeixinnumber();
        if (weixinnumber != null) {
            stmt.bindString(3, weixinnumber);
        }
 
        String weixinpwd = entity.getWeixinpwd();
        if (weixinpwd != null) {
            stmt.bindString(4, weixinpwd);
        }
 
        java.util.Date starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindLong(5, starttime.getTime());
        }
 
        java.util.Date endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(6, endtime.getTime());
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProxyTalk readEntity(Cursor cursor, int offset) {
        ProxyTalk entity = new ProxyTalk( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phonenumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weixinnumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // weixinpwd
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // starttime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // endtime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProxyTalk entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhonenumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeixinnumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeixinpwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStarttime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEndtime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProxyTalk entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProxyTalk entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
