package com.xstd.pirvatephone.dao.contact;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.pirvatephone.dao.contact.ContactInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACT_INFO.
*/
public class ContactInfoDao extends AbstractDao<ContactInfo, Long> {

    public static final String TABLENAME = "CONTACT_INFO";

    /**
     * Properties of entity ContactInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone_number = new Property(1, String.class, "phone_number", false, "PHONE_NUMBER");
        public final static Property Display_name = new Property(2, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Contact_id = new Property(3, Long.class, "contact_id", false, "CONTACT_ID");
        public final static Property Photo_id = new Property(4, Long.class, "photo_id", false, "PHOTO_ID");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
    };


    public ContactInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ContactInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHONE_NUMBER' TEXT NOT NULL ," + // 1: phone_number
                "'DISPLAY_NAME' TEXT NOT NULL ," + // 2: display_name
                "'CONTACT_ID' INTEGER," + // 3: contact_id
                "'PHOTO_ID' INTEGER," + // 4: photo_id
                "'TYPE' INTEGER NOT NULL );"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPhone_number());
        stmt.bindString(3, entity.getDisplay_name());
 
        Long contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindLong(4, contact_id);
        }
 
        Long photo_id = entity.getPhoto_id();
        if (photo_id != null) {
            stmt.bindLong(5, photo_id);
        }
        stmt.bindLong(6, entity.getType());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactInfo readEntity(Cursor cursor, int offset) {
        ContactInfo entity = new ContactInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // phone_number
            cursor.getString(offset + 2), // display_name
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // contact_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // photo_id
            cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone_number(cursor.getString(offset + 1));
        entity.setDisplay_name(cursor.getString(offset + 2));
        entity.setContact_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPhoto_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
