package com.xstd.pirvatephone.dao.demo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.pirvatephone.dao.demo.PushUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PUSH_USER_INFO.
*/
public class PushUserInfoDao extends AbstractDao<PushUserInfo, Long> {

    public static final String TABLENAME = "PUSH_USER_INFO";

    /**
     * Properties of entity PushUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property LastLoginTime = new Property(1, Long.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property GenerateId = new Property(2, String.class, "generateId", false, "GENERATE_ID");
        public final static Property Ticket = new Property(3, String.class, "ticket", false, "TICKET");
        public final static Property Secret_key = new Property(4, String.class, "secret_key", false, "SECRET_KEY");
        public final static Property Server = new Property(5, String.class, "server", false, "SERVER");
    };


    public PushUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PushUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PUSH_USER_INFO' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'LAST_LOGIN_TIME' INTEGER," + // 1: lastLoginTime
                "'GENERATE_ID' TEXT," + // 2: generateId
                "'TICKET' TEXT," + // 3: ticket
                "'SECRET_KEY' TEXT," + // 4: secret_key
                "'SERVER' TEXT);"); // 5: server
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PUSH_USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PushUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindLong(2, lastLoginTime);
        }
 
        String generateId = entity.getGenerateId();
        if (generateId != null) {
            stmt.bindString(3, generateId);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(4, ticket);
        }
 
        String secret_key = entity.getSecret_key();
        if (secret_key != null) {
            stmt.bindString(5, secret_key);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(6, server);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PushUserInfo readEntity(Cursor cursor, int offset) {
        PushUserInfo entity = new PushUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // lastLoginTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // generateId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ticket
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // secret_key
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // server
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PushUserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLastLoginTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGenerateId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTicket(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSecret_key(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PushUserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PushUserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
