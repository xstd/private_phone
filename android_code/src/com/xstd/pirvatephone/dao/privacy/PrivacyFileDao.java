package com.xstd.pirvatephone.dao.privacy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.pirvatephone.dao.privacy.PrivacyFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRIVACY_FILE.
*/
public class PrivacyFileDao extends AbstractDao<PrivacyFile, Long> {

    public static final String TABLENAME = "PRIVACY_FILE";

    /**
     * Properties of entity PrivacyFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SrcName = new Property(1, String.class, "srcName", false, "SRC_NAME");
        public final static Property DestName = new Property(2, String.class, "destName", false, "DEST_NAME");
        public final static Property SrcPath = new Property(3, String.class, "srcPath", false, "SRC_PATH");
        public final static Property Misstime = new Property(4, java.util.Date.class, "misstime", false, "MISSTIME");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
    };


    public PrivacyFileDao(DaoConfig config) {
        super(config);
    }
    
    public PrivacyFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRIVACY_FILE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SRC_NAME' TEXT NOT NULL ," + // 1: srcName
                "'DEST_NAME' TEXT NOT NULL ," + // 2: destName
                "'SRC_PATH' TEXT NOT NULL ," + // 3: srcPath
                "'MISSTIME' INTEGER," + // 4: misstime
                "'TYPE' INTEGER);"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRIVACY_FILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrivacyFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSrcName());
        stmt.bindString(3, entity.getDestName());
        stmt.bindString(4, entity.getSrcPath());
 
        java.util.Date misstime = entity.getMisstime();
        if (misstime != null) {
            stmt.bindLong(5, misstime.getTime());
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrivacyFile readEntity(Cursor cursor, int offset) {
        PrivacyFile entity = new PrivacyFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // srcName
            cursor.getString(offset + 2), // destName
            cursor.getString(offset + 3), // srcPath
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // misstime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrivacyFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSrcName(cursor.getString(offset + 1));
        entity.setDestName(cursor.getString(offset + 2));
        entity.setSrcPath(cursor.getString(offset + 3));
        entity.setMisstime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrivacyFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrivacyFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
