package com.xstd.pirvatephone.dao.privacy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.pirvatephone.dao.privacy.SrcToDestMapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SRC_TO_DEST_MAPPING.
*/
public class SrcToDestMappingDao extends AbstractDao<SrcToDestMapping, Void> {

    public static final String TABLENAME = "SRC_TO_DEST_MAPPING";

    /**
     * Properties of entity SrcToDestMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SrcName = new Property(0, String.class, "srcName", false, "SRC_NAME");
        public final static Property DestName = new Property(1, String.class, "destName", false, "DEST_NAME");
        public final static Property SrcPath = new Property(2, String.class, "srcPath", false, "SRC_PATH");
        public final static Property Misstime = new Property(3, Long.class, "misstime", false, "MISSTIME");
    };


    public SrcToDestMappingDao(DaoConfig config) {
        super(config);
    }
    
    public SrcToDestMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SRC_TO_DEST_MAPPING' (" + //
                "'SRC_NAME' TEXT NOT NULL ," + // 0: srcName
                "'DEST_NAME' TEXT UNIQUE ," + // 1: destName
                "'SRC_PATH' TEXT NOT NULL ," + // 2: srcPath
                "'MISSTIME' INTEGER);"); // 3: misstime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SRC_TO_DEST_MAPPING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SrcToDestMapping entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSrcName());
 
        String destName = entity.getDestName();
        if (destName != null) {
            stmt.bindString(2, destName);
        }
        stmt.bindString(3, entity.getSrcPath());
 
        Long misstime = entity.getMisstime();
        if (misstime != null) {
            stmt.bindLong(4, misstime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SrcToDestMapping readEntity(Cursor cursor, int offset) {
        SrcToDestMapping entity = new SrcToDestMapping( //
            cursor.getString(offset + 0), // srcName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // destName
            cursor.getString(offset + 2), // srcPath
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // misstime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SrcToDestMapping entity, int offset) {
        entity.setSrcName(cursor.getString(offset + 0));
        entity.setDestName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSrcPath(cursor.getString(offset + 2));
        entity.setMisstime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SrcToDestMapping entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SrcToDestMapping entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
